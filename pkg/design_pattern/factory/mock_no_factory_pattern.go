// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/design_pattern/factory/no_factory_pattern.go

// Package factory is a generated GoMock package.
package factory

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIProductWithoutFactory is a mock of IProductWithoutFactory interface.
type MockIProductWithoutFactory struct {
	ctrl     *gomock.Controller
	recorder *MockIProductWithoutFactoryMockRecorder
}

// MockIProductWithoutFactoryMockRecorder is the mock recorder for MockIProductWithoutFactory.
type MockIProductWithoutFactoryMockRecorder struct {
	mock *MockIProductWithoutFactory
}

// NewMockIProductWithoutFactory creates a new mock instance.
func NewMockIProductWithoutFactory(ctrl *gomock.Controller) *MockIProductWithoutFactory {
	mock := &MockIProductWithoutFactory{ctrl: ctrl}
	mock.recorder = &MockIProductWithoutFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProductWithoutFactory) EXPECT() *MockIProductWithoutFactoryMockRecorder {
	return m.recorder
}

// String mocks base method.
func (m *MockIProductWithoutFactory) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockIProductWithoutFactoryMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockIProductWithoutFactory)(nil).String))
}
